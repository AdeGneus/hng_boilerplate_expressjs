{
  "openapi": "3.1.0",
  "info": {
    "title": "BoilerPlate Express API with Swagger",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000/",
      "description": "Local server"
    },
    {
      "url": "https://staging.api-expressjs.boilerplate.hng.tech/",
      "description": "Live server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Blog": {
        "type": "object",
        "required": ["title", "content"],
        "properties": {
          "title": {
            "type": "string",
            "default": "blog title 1"
          },
          "content": {
            "type": "string",
            "default": "Blog wey make sense"
          },
          "author": {
            "type": "string",
            "default": "John Doe"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "default": "2023-07-21T19:58:00.000Z"
          }
        }
      },
      "BlogResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "category": {
            "type": "string"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": ["name", "description", "price", "category", "user"],
        "properties": {
          "name": {
            "type": "string",
            "default": "Product 1"
          },
          "description": {
            "type": "string",
            "default": "Very nice"
          },
          "price": {
            "type": "number",
            "default": 100
          },
          "category": {
            "type": "string",
            "default": "Hardware"
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "category": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string",
            "example": "Lewis"
          },
          "email": {
            "type": "string",
            "example": "lewis@gmail.com"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "58b6"
          },
          "user_name": {
            "type": "string",
            "example": "yasuke"
          },
          "email": {
            "type": "string",
            "example": "sam@gmail.com"
          },
          "profile_picture": {
            "type": "string",
            "example": "https://avatar.com"
          },
          "bio": {
            "type": "string",
            "example": "Developer at HNG"
          }
        }
      },
      "GetProfileResponse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "number",
            "example": 200
          },
          "data": {
            "$ref": "#/components/schemas/UserProfile"
          }
        }
      },
      "GetAllUsersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "status_code": {
            "type": "number",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Users retrieved successfully"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "totalPages": {
                "type": "number",
                "example": 10
              },
              "currentPage": {
                "type": "number",
                "example": 1
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "DeleteUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "status_code": {
            "type": "number",
            "example": 202
          },
          "message": {
            "type": "string",
            "example": "User deleted successfully"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/admin/organisation/{id}": {
      "patch": {
        "summary": "Admin-Update an existing organisation",
        "tags": ["Admin"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "industry": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organisation Updated Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "industry": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/admin/organizations/{org_id}/delete": {
      "delete": {
        "summary": "Admin-Delete an existing organization",
        "tags": ["Admin"],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "description": "The ID of the organization to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Valid organization ID must be provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete organization. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users/{id}": {
      "patch": {
        "summary": "Admin-Update an existing user",
        "tags": ["Admin"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  },
                  "isverified": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Updated Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "isverified": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "summary": "Superadmin - Get a single user",
        "tags": ["Admin"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user data to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "profile_picture": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "summary": "Admin-List users with pagination",
        "tags": ["Admin"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Number of users per page",
            "schema": {
              "type": "integer",
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "currentPage": {
                          "type": "integer"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "api/v1/auth/register": {
      "post": {
        "summary": "Sign up a new user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mailSent": {
                      "type": "string"
                    },
                    "newUser": {
                      "type": "object"
                    },
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/v1/auth/verify-otp": {
      "post": {
        "summary": "Verify the user's email using OTP",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "integer",
                    "description": "The OTP sent to the user's email"
                  },
                  "token": {
                    "type": "string",
                    "description": "The token received during sign up"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid OTP or verification token has expired"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Log in a user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/v1/auth/forgotPassword": {
      "post": {
        "summary": "Request a password reset",
        "description": "Allows a user to request a password reset link by providing their email address.",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address of the user.",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully requested password reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the request.",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "The message indicating the result of the request.",
                      "example": "Password reset link sent to your email."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/auth/resetPassword": {
      "post": {
        "summary": "Reset a user's password",
        "description": "Allows a user to reset their password by providing a valid reset token and a new password.",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "newPassword"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The password reset token.",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password for the user.",
                    "example": "new_secure_password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "The message indicating the result of the password reset.",
                      "example": "Password has been reset successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/auth/change-password": {
      "patch": {
        "summary": "Change user password",
        "tags": ["Auth"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "Current password of the user"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password to set for the user"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "description": "Confirmation of the new password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, such as mismatched passwords or invalid input"
          },
          "401": {
            "description": "Unauthorized, invalid credentials or not authenticated"
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/v1/auth/google-signin": {
      "post": {
        "summary": "Handle Google authentication and register/login a user",
        "description": "This endpoint handles Google OAuth2.0 authentication. It accepts a Google user payload and either registers a new user or logs in an existing one.",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address.",
                    "example": "user@example.com"
                  },
                  "email_verified": {
                    "type": "boolean",
                    "description": "Whether the user's email is verified.",
                    "example": true
                  },
                  "name": {
                    "type": "string",
                    "description": "The user's full name.",
                    "example": "John Doe"
                  },
                  "picture": {
                    "type": "string",
                    "format": "url",
                    "description": "URL to the user's profile picture.",
                    "example": "https://example.com/avatar.jpg"
                  },
                  "sub": {
                    "type": "string",
                    "description": "Google user ID (subject claim).",
                    "example": "1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Verify if authentication is successful",
                      "example": "Authentication successful"
                    },
                    "user": {
                      "type": "object",
                      "description": "The authenticated user object."
                    },
                    "access_token": {
                      "type": "string",
                      "description": "JWT access token for authentication.",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing data in request body"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/api/v1/blog/{blogId}/comment": {
      "post": {
        "summary": "Create a comment on a blog post",
        "description": "Add a new comment to a specific blog post",
        "tags": ["BlogComment"],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the blog post"
          },
          {
            "in": "body",
            "name": "content",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "This is a test comment."
                }
              }
            },
            "required": true,
            "description": "Comment content"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment created successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "example": "This is a test comment."
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-07-21T19:58:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment content must be provided and cannot be empty."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to create comment. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/{commentId}/edit-comment": {
      "patch": {
        "summary": "Edit a comment",
        "description": "Edit an existing comment by its ID",
        "tags": ["BlogComment"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the comment to be edited"
          },
          {
            "in": "body",
            "name": "content",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Updated comment content."
                }
              }
            },
            "required": true,
            "description": "New content for the comment"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "successful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment edited successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "example": "Updated comment content."
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-07-21T19:58:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment content must be provided and cannot be empty."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Edit not allowed within 30 minutes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "You cannot edit or create a comment within 30 minutes of its initial creation or last update."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "The comment you are trying to edit does not exist"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to edit comment. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog": {
      "get": {
        "summary": "Get a paginated list of blogs",
        "description": "Retrieve a paginated list of blog posts",
        "tags": ["Blog"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of blog posts per page"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "example": "My First Blog"
                          },
                          "content": {
                            "type": "string",
                            "example": "This is the content of my first blog post."
                          },
                          "author": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "published_at": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-07-21T19:58:00.000Z"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total_pages": {
                          "type": "integer",
                          "example": 2
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 15
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid query params passed"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/user": {
      "get": {
        "summary": "Get a paginated list of blogs by user",
        "description": "Retrieve a paginated list of blog posts created by the authenticated user",
        "tags": ["Blog"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of blog posts per page"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of blog posts by the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "example": "My First Blog"
                          },
                          "content": {
                            "type": "string",
                            "example": "This is the content of my first blog post."
                          },
                          "author": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "published_date": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-07-21T19:58:00.000Z"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total_pages": {
                          "type": "integer",
                          "example": 2
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 15
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid query params passed"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/{id}": {
      "delete": {
        "summary": "Delete a blog post",
        "description": "Delete a specific blog post by its ID",
        "tags": ["Blog"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the blog post"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Blog post deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "error": {
                      "type": "string",
                      "example": "Blog post not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "string",
                      "example": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contact": {
      "post": {
        "summary": "Submit a contact form",
        "description": "Allows users to submit their contact details and message.",
        "tags": ["Contact"],
        "requestBody": {
          "description": "Contact details and message",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@example.com"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": 1234567890
                  },
                  "message": {
                    "type": "string",
                    "example": "I would like to inquire about your services."
                  }
                },
                "required": ["name", "email", "phoneNumber", "message"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact submitted successfully"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@example.com"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "example": 1234567890
                        },
                        "message": {
                          "type": "string",
                          "example": "I would like to inquire about your services."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["Please enter a valid email address."]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organisation/members/export": {
      "get": {
        "summary": "Export signed-in user information",
        "tags": ["Export user data by csv or pdf format"],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "pdf"]
            },
            "required": true,
            "description": "The format to export the user data in."
          }
        ],
        "responses": {
          "200": {
            "description": "User data exported successfully.",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid format."
          },
          "401": {
            "description": "Unauthorized. No token provided or token is invalid."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "api/v1/auth/google": {
      "get": {
        "summary": "Initiate Google OAuth authentication",
        "description": "This endpoint initiates the OAuth 2.0 authentication process with Google. It redirects the user to the Google login page where they can authenticate. Upon successful authentication, Google will redirect the user back to the specified callback URL.",
        "tags": ["Auth"],
        "responses": {
          "302": {
            "description": "Redirect to Google's OAuth 2.0 login page",
            "headers": {
              "Location": {
                "description": "The URL to which the user is being redirected",
                "schema": {
                  "type": "string",
                  "example": "https://accounts.google.com/o/oauth2/auth"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred during the initiation of the authentication process"
          }
        }
      }
    },
    "api/v1/auth/google/callback": {
      "post": {
        "summary": "Google OAuth callback",
        "description": "This endpoint handles the callback from Google's OAuth2.0 authentication. It processes the user information and generates a JSON Web Token (JWT) for authenticated users.",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The body contains user information returned by Google after successful authentication.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for the user.",
                      "example": "117189586949299940593"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the user.",
                      "example": "example@gmail.com"
                    },
                    "name": {
                      "type": "string",
                      "description": "The full name of the user.",
                      "example": "John Doe"
                    },
                    "picture": {
                      "type": "string",
                      "description": "URL to the user's profile picture.",
                      "example": "https://example.com/profile.jpg"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "JWT token for authenticated user."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "picture": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed"
          },
          "500": {
            "description": "Internal Server Error - An error occurred during the authentication process"
          }
        }
      }
    },
    "/api/v1/help-center/": {
      "post": {
        "summary": "SuperAdmin- Create a new help center topic",
        "tags": ["HelpCenter"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "content", "author"],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "author": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Topic Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "article_id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "author": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/help-center/topics": {
      "get": {
        "summary": "Get all help center topics",
        "tags": ["HelpCenter"],
        "responses": {
          "201": {
            "description": "Fetch Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          },
                          "author": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/help-center/topics/{id}": {
      "get": {
        "summary": "Get a help center topic by ID",
        "tags": ["HelpCenter"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The topic ID"
          }
        ],
        "responses": {
          "201": {
            "description": "Fetch Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "author": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/help-center/topic/{:id}": {
      "delete": {
        "summary": "SuperAdmin- Delete a help center topic by ID",
        "tags": ["HelpCenter"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The topic ID"
          }
        ],
        "responses": {
          "201": {
            "description": "Delete Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied! You are not an admin"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/help-center/topic/{id}": {
      "patch": {
        "summary": "SuperAdmin- Update a help center topic by ID",
        "tags": ["HelpCenter"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The topic ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "content", "author"],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "author": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Topic Updated Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "article_id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "author": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied! You are not an admin"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/settings/nofication-settings": {
      "post": {
        "summary": "Create a new notification setting",
        "tags": ["notifications"],
        "requestBody": {
          "require": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "example": 123456
                  },
                  "email_notification": {
                    "type": "boolean",
                    "example": true
                  },
                  "push_notification": {
                    "type": "boolean",
                    "example": false
                  },
                  "sms_notification": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification setting created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "notification": {
                      "type": "array",
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Unsuccessful"
                    },
                    "message": {
                      "type": "string",
                      "example": "Notification settings was not created successfully"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "conflict - notification setting already exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Unsuccessful"
                    },
                    "message": {
                      "type": "string",
                      "example": "Notification setting for this user already exist"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/settings/nofication-settings/{user_id}": {
      "get": {
        "summary": "Get user's notification settings",
        "tags": ["notifications"],
        "requestBody": {
          "require": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification setting retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "notification": {
                      "type": "array",
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Unsuccessful"
                    },
                    "message": {
                      "type": "string",
                      "example": "The user with the requested id cannot found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organisations": {
      "post": {
        "summary": "Create a new organisation",
        "description": "This endpoint allows a user to create a new organisation",
        "tags": ["Organisation"],
        "operationId": "createOrganisation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Organisation payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "My Organisation"
                  },
                  "description": {
                    "type": "string",
                    "example": "This is a sample organisation."
                  },
                  "email": {
                    "type": "string",
                    "example": "name@gmail.com"
                  },
                  "industry": {
                    "type": "string",
                    "example": "entertainment"
                  },
                  "type": {
                    "type": "string",
                    "example": "music"
                  },
                  "country": {
                    "type": "string",
                    "example": "Nigeria"
                  },
                  "state": {
                    "type": "string",
                    "example": "Oyo"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "email",
                  "industry",
                  "type",
                  "country",
                  "state"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Organisation created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "1"
                        },
                        "name": {
                          "type": "string",
                          "example": "My Organisation"
                        },
                        "description": {
                          "type": "string",
                          "example": "This is a sample organisation."
                        },
                        "email": {
                          "type": "string",
                          "example": "abc@gmail.com"
                        },
                        "industry": {
                          "type": "string",
                          "example": "entertainment"
                        },
                        "type": {
                          "type": "string",
                          "example": "music"
                        },
                        "country": {
                          "type": "string",
                          "example": "Nigeria"
                        },
                        "state": {
                          "type": "string",
                          "example": "Oyo"
                        },
                        "slug": {
                          "type": "string",
                          "example": "86820688-fd94-4b58-9bdd-99a701714a77"
                        },
                        "owner_id": {
                          "type": "string",
                          "example": "86820688-fd94-4b58-9bdd-99a701714a76"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{userId}/organisations": {
      "get": {
        "summary": "Get user organizations",
        "description": "Retrieve all organizations associated with a specific user",
        "tags": ["Organisation"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Organizations retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID or authentication mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid user ID or authentication mismatch."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve organizations. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organisations/{org_id}": {
      "get": {
        "summary": "Get a single organization",
        "description": "Retrieve details of a specific organization by its ID",
        "tags": ["Organisation"],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "org_id": {
                          "type": "string",
                          "example": "2928a3d6-2b85-4abc-9438-ff9769b126ed"
                        },
                        "name": {
                          "type": "string",
                          "example": "Organisation 1"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description of the organisation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to get user organisation. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organisations/{org_id}/user/{user_id}": {
      "delete": {
        "summary": "Remove a user from an organization",
        "description": "Delete a user from a specific organization by user ID and organization ID",
        "tags": ["Organisation"],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the organization"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to remove user from organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to remove user from organization"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found in the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found in the organization"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/join": {
      "post": {
        "summary": "Join an organization",
        "description": "This endpoint allows a user to join an organization using an invite token",
        "tags": ["Organisation"],
        "operationId": "joinOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Invite token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["inviteToken"],
                "properties": {
                  "inviteToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully added to the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User successfully added to the organization."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "Invite token is required!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organisations/{orgId}/invite": {
      "post": {
        "summary": "Create an invitation to join an organization",
        "tags": ["Organisation"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the organization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the invitee",
                    "example": "invitee@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Invitation successfully sent."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Error message describing the issue."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "Email is required!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/flutterwave/initiate": {
      "post": {
        "summary": "Initiate a payment with Flutterwave",
        "tags": ["Payments"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "card_number",
                  "cvv",
                  "expiry_month",
                  "expiry_year",
                  "email",
                  "fullname",
                  "phone_number",
                  "currency",
                  "amount",
                  "payer_id",
                  "payer_type"
                ],
                "properties": {
                  "card_number": {
                    "type": "string"
                  },
                  "cvv": {
                    "type": "string"
                  },
                  "expiry_month": {
                    "type": "string"
                  },
                  "expiry_year": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "fullname": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "payer_id": {
                    "type": "string"
                  },
                  "payer_type": {
                    "type": "string",
                    "enum": ["user", "organization"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Payment initiation failed"
          }
        }
      }
    },
    "/api/v1/payments/flutterwave/verify/{transactionId}": {
      "get": {
        "summary": "Verify a Flutterwave payment",
        "tags": ["Payments"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the transaction to verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Payment verification failed"
          }
        }
      }
    },
    "/api/v1/payments/lemonsqueezy/initiate": {
      "get": {
        "summary": "Initiates a payment using LemonSqueezy",
        "tags": ["Payments"],
        "responses": {
          "200": {
            "description": "Payment initiation link",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<a href=\"https://ifeoluwa-hng-stage-5.lemonsqueezy.com/buy/bf9fee27-d226-4637-a32f-013bd717c3b3?embed=1\" class=\"lemonsqueezy-button\">Make Payments</a><script src=\"https://assets.lemonsqueezy.com/lemon.js\" defer></script>"
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while processing the payment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while processing the payment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/lemonsqueezy/webhook": {
      "post": {
        "summary": "Handles LemonSqueezy webhook notifications",
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Webhook received"
                }
              }
            }
          },
          "400": {
            "description": "Webhook verification failed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Webhook verification failed"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all products",
        "description": "API endpoint that retrieves all user list of products with pagination support.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "The page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "The number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Products retrieved successfully"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "integer",
                          "example": 100
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 10
                        },
                        "currentPage": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Product 1"
                          },
                          "description": {
                            "type": "string",
                            "example": "Product is very robust"
                          },
                          "price": {
                            "type": "number",
                            "example": 19
                          },
                          "category": {
                            "type": "string",
                            "example": "Gadgets"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "The query parameters must be positive integers"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "The requested page is out of range."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred while processing your request. Please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Product"],
        "summary": "Create a product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "category": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Product created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "price": {
                          "type": "number"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "category": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user | Invalid product detail | Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "unsuccessful"
                        },
                        "status_code": {
                          "type": "integer",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "example": "Validation error"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "property": {
                                "type": "string"
                              },
                              "constraints": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status_code": {
                          "type": "string",
                          "example": "401"
                        },
                        "message": {
                          "type": "string",
                          "example": "Invalid token"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/products/{product_id}": {
      "get": {
        "summary": "Fetch a product by its ID",
        "tags": ["Product"],
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the product to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 123
                    },
                    "name": {
                      "type": "string",
                      "example": "Product 1"
                    },
                    "description": {
                      "type": "string",
                      "example": "Product is robust"
                    },
                    "price": {
                      "type": "number",
                      "example": 19
                    },
                    "category": {
                      "type": "string",
                      "example": "Gadgets"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid product ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Product Id"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product not found"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a product by its ID",
        "tags": ["Product"],
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the product to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Product Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated description of the product"
                  },
                  "price": {
                    "type": "number",
                    "example": 20
                  },
                  "category": {
                    "type": "string",
                    "example": "Electronics"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product updated successfully"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123
                        },
                        "name": {
                          "type": "string",
                          "example": "Updated Product Name"
                        },
                        "description": {
                          "type": "string",
                          "example": "Updated description of the product"
                        },
                        "price": {
                          "type": "number",
                          "example": 20
                        },
                        "category": {
                          "type": "string",
                          "example": "Electronics"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid product ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Product Id"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product not found"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a product by its ID",
        "tags": ["Product"],
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Product deleted successfully"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid product ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Product Id"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Product not found"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/email-templates": {
      "get": {
        "tags": ["Email"],
        "summary": "Get all email templates",
        "description": "Retrieve a list of all email templates",
        "responses": {
          "200": {
            "description": "The list of email templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailTemplates"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/send-email": {
      "post": {
        "tags": ["Email"],
        "summary": "Send an email using a predefined template",
        "description": "Submits an email sending request referencing a specific template.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "string",
                    "example": "account-activation-request"
                  },
                  "recipient": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "variables": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "example": "Activate Your Account"
                      },
                      "activationLinkUrl": {
                        "type": "string",
                        "example": "https://example.com"
                      },
                      "user_name": {
                        "type": "string",
                        "example": "John Doe"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Email sending request accepted and is being processed in the background.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sending request accepted and is being processed in the background."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An invalid request was sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An invalid request was sent."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Template not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Template not found."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "This method is not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "This method is not allowed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sms/send": {
      "post": {
        "summary": "Send an SMS",
        "description": "Sends an SMS message to the specified phone number.",
        "tags": ["SMS"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["phone_number", "message"],
                "properties": {
                  "phone_number": {
                    "type": "string",
                    "example": "+23465544466",
                    "description": "The phone number to send the SMS to."
                  },
                  "message": {
                    "type": "string",
                    "example": "Hello, this is a test message.",
                    "description": "The content of the SMS message."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMS added to the queue successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SMS added to the queue successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Valid phone number, message content, and sender ID must be provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Sender not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send SMS. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "api/v1/testimonials": {
      "post": {
        "summary": "Create a new testimonial",
        "tags": ["Testimonials"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_name": {
                    "type": "string"
                  },
                  "client_position": {
                    "type": "string"
                  },
                  "testimonial": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Testimonial created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "api/v1/testimonials/{id}": {
      "get": {
        "summary": "Retrieve a testimonial by ID",
        "tags": ["Testimonials"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Testimonial ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Testimonial retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Testimonial not found"
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/organization/{organization_id}": {
      "put": {
        "summary": "Update organization details",
        "description": "Updates the details of an organization by its ID.",
        "tags": ["Organization"],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the organization to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to update organization details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "status_code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["User"],
        "summary": "Get User profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Api endpoint to retrieve the profile data of the currently authenticated user. This will allow users to access their own profile information.",
        "responses": {
          "200": {
            "description": "Fetched User profile Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "58b6"
                        },
                        "user_name": {
                          "type": "string",
                          "example": "yasuke"
                        },
                        "email": {
                          "type": "string",
                          "example": "sam@gmail.com"
                        },
                        "profile_picture": {
                          "type": "string",
                          "example": "https://avatar.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "integer",
                          "example": 100
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 10
                        },
                        "currentPage": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_name": {
                            "type": "string",
                            "example": "Lewis"
                          },
                          "email": {
                            "type": "string",
                            "example": "lewis@gmail.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/user/{id}": {
      "delete": {
        "tags": ["User"],
        "summary": "Soft Delete a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "uuid"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "202": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 202
                    },
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Valid id must be provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to perform soft delete"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "SuperAdmin- Update a user",
        "description": "API endpoint that allows authenticated super admins to update a single user's details. This endpoint ensures that only users with super admin privileges can modify user information, maintaining system security.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "New"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "isVerified": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Access denied. Super admin privileges required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "unsuccessful"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User with id '123' not found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "status_code": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid user details provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Admin",
      "description": "Admin Related Routes"
    },
    {
      "name": "Auth",
      "description": "Authentication related routes"
    },
    {
      "name": "HelpCenter",
      "description": "Help Center related routes"
    },
    {
      "name": "Payments",
      "description": "Payment related operations"
    },
    {
      "name": "Testimonials",
      "description": "Testimonial related routes"
    },
    {
      "name": "User",
      "description": "User related routes"
    }
  ]
}
